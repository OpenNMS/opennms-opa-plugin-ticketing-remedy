version: 2.1

executors:
  build-executor:
    docker:
      - image: cimg/openjdk:8.0
        environment:
          MAVEN_OPTS: -Xmx1g

orbs:
  cloudsmith: cloudsmith/cloudsmith@1.0.5
  sign-packages: opennms/sign-packages@2.3.0

workflows:
  build-deploy:
    jobs:
      - build:
          context:
            - gpg-signing
          filters:
            tags:
              only:
                - /^v.*/
      - tests:
          requires:
            - build
          filters:
            tags:
              only:
                - /^v.*/
      - prepare-release:
          requires:
            - tests
          filters:
            tags:
              only:
                - /^v.*/
            branches:
              only:
                - /^main.*/
                - /^release-.*/
      - deploy-maven:
          context:
            - "gpg-signing"
            - "OSSRH Principal"
          requires:
            - prepare-release
          filters:
            tags:
              only:
                - /^v.*/
            branches:
              only:
                - /^main.*/
                - /^release-.*/
      - publish-github-release:
          context:
            - github-releases
          requires:
            - prepare-release
          filters:
            tags:
              only:
                - /^v.*/
            branches:
              ignore: /.*/

commands:
  create-mega-pom:
    steps:
      - run:
          name: Create mega-POM for checksumming
          command: git grep -l '<modelVersion>' | grep pom.xml | sort -u | xargs cat > /tmp/mega-pom.txt
  gather-artifacts:
    steps:
      - run:
          name: Gather artifacts
          command: |
              mkdir -p ~/output
              find . \
                   -type f \
                   \
                   \( \
                       -name \*.jar -o \
                       -name \*.kar -o \
                       -name \*.rpm -o \
                       -name \*.deb \
                   \) \
                   \
                   -print \
                   -exec cp {} ~/output/ \
              \;
  release-lint:
    steps:
      - run:
          name: Check for common release issues
          command: |
            curl -L -o /tmp/release-lint.sh https://raw.githubusercontent.com/OpenNMS/opennms-repo/master/script/release-lint.sh
            chmod 755 /tmp/release-lint.sh

            LINT_WARN_ONLY=1
            if [ -n "${CIRCLE_TAG}" ]; then
              LINT_WARN_ONLY=0
            fi
            case "${CIRCLE_BRANCH}" in
              main-*)
                LINT_WARN_ONLY=0
                ;;
            esac

            if [ "${LINT_WARN_ONLY}" -eq 1 ]; then
              /tmp/release-lint.sh -w
            else
              /tmp/release-lint.sh
            fi

jobs:
  build:
    executor: build-executor
    resource_class: small
    steps:
      - checkout
      - create-mega-pom
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "/tmp/mega-pom.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Compile source without tests
          command: mvn -DskipITs=true -DskipTests=true clean install
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "/tmp/mega-pom.txt" }}
      - gather-artifacts
      - persist_to_workspace:
          root: ~/
          paths:
            - output
            - .m2
            - project
      - store_artifacts:
          path: ~/output
          destination: artifact-file

  tests:
    executor: build-executor
    resource_class: small
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Run integration tests
          command: |
            mvn -DskipITs=false -DskipTests=false clean install
      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/target/failsafe-reports/.*xml" -exec cp {} ~/junit/ \;
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/junit/ \;
          when: always
      - store_test_results:
          path: ~/junit

  deploy-maven:
    executor: build-executor
    steps:
      - checkout

      - create-mega-pom
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}

      - sign-packages/setup-env:
          skip_if_forked_pr: true
      - run:
          name: Deploy to Maven Central
          command: |
            mkdir -p ~/.m2
            echo "${GPG_SECRET_KEY}" | base64 -d > ~/.m2/sign-key.asc
            export SIGN_KEY_PASS="$(echo "${GPG_PASSPHRASE}" | base64 -d)"
            mvn -Prelease -s .circleci/.circleci.settings.xml -Ddisable.checkstyle=true -DskipTests -Dmaven.verify.skip=true -Dmaven.install.skip=true deploy

  prepare-release:
    executor: build-executor
    working_directory: ~/project
    steps:
      - attach_workspace:
          at: ~/
      - release-lint
      - run:
          name: Validate artifacts
          command: |
            if [ "$(cd ~/output; ls -1 *.kar | wc -l)" -eq 0 ]; then
              echo "ERROR: no .kar file was saved to ~/output"
              exit 1
            fi
            if [ "$(cd ~/output; ls -1 *.jar | wc -l)" -eq 0 ]; then
              echo "ERROR: no .jar files were saved to ~/output"
              exit 1
            fi

  publish-github-release:
    executor: build-executor
    working_directory: ~/project
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Install GitHub CLI and Publish release on GitHub
          command: |
            if [ -z "${CIRCLE_TAG}" ]; then
              echo "Skipping step as we don't have a tag!"
            else
              tag=${CIRCLE_TAG}

              # Install GitHub CLI
              type -p curl >/dev/null || sudo apt install curl -y
              curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
              && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
              && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
              && sudo apt update \
              && sudo apt install gh -y

              echo "* creating release from $tag tag"
              gh release create $tag --title "$tag Release" --notes "$tag prerelease!" --prerelease --generate-notes

              echo "* uploading files to tag:" ~/output/*
              gh release upload $tag ~/output/*
            fi




